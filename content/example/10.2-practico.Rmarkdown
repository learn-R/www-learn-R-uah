---
title: "Regresión logística"
linktitle: "10.2: Regresión logística"
date: "2021-08-24"
menu:
  example:
    parent: Ejemplos
    weight: 11
type: docs
toc: yes
editor_options: 
  chunk_output_type: console
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
options(scipen = 999)
```

## 0. Objetivos del práctico

Este práctico tiene por objetivo presentar cómo crear modelos de regresión logística - con y sin consideración de diseño muestral - en R, con predictores categóricos y cuantitativos; cómo exponenciar los coeficientes para facilitar su interpretación; y, por último, herramientas de visualización de los modelos generados (sobre todo con `texreg`). Por supuesto, seguimos en el proceso de **análisis de datos**

![](https://github.com/learn-R/slides/raw/main/img/01/flow-rproject.png)

## 1. Recursos del práctico

Este práctico fue elaborado con datos de la [**Encuesta Suplementaria de Ingresos (ESI)**](https://www.ine.cl/estadisticas/sociales/ingresos-y-gastos/encuesta-suplementaria-de-ingresos) en su versión 2020. Cuando trabajen con algún set de datos, nunca olviden revisar la documentación metodológica anexa, así como el [libro de códigos](https://www.ine.cl/docs/default-source/encuesta-suplementaria-de-ingresos/bbdd/manual-y-guía-de-variables/2020/personas-esi-2020.pdf?sfvrsn=f196cb4e_4) correspondiente. 

Los datos ya fueron procesados anteriormente, a modo de concentrar el práctico en la creación de los modelos. Así, por ejemplo, los predictores categóricos ya fueron transformados en variables de tipo `factor`. Pueden revisar el script `proc.R` ubicado en la carpeta `R`, para profundizar en el tratamiento de los datos. 

- [<i class="fas fa-file-archive"></i> `10.2-clase.zip`](https://github.com/learn-R/10.2-class/raw/main/10.2-clase.zip)

## 2. Librerías a utilizar

En este práctico utilizaremos seis paquetes

1. `pacman`: este facilita y agiliza la lectura de los paquetes a utilizar en R;

2. `tidyverse`: colección de paquetes;

3. `srvyr`: para crear el objeto encuesta;

4. `survey`: para crear modelos incorporando el diseño muestral;

5. `sjPlot`: para presentar tablas y gráficos con los modelos creados;

6. `remotes`: para instalar `texreg` desde GitHub;

7. `texreg`: para crear tablas en formato publicable. 

# Pasos del procesamiento

## 1. Cargar librerías

Como en las prácticas anteriores, empleamos la función `p_load` de la librería `pacman`. También utilizamos la función `install_github()` de `remotes` para poder instalar la librería `texreg`

```{r packages, message=FALSE, warning=FALSE, include=TRUE}
remotes::install_github("leifeld/texreg", force = T)

pacman::p_load(sjPlot, 
               tidyverse, 
               srvyr,
               survey,
               remotes,
               texreg)

```

## 2. Cargar datos

Como se señaló anteriormente, en este práctico se trabajará con los datos de la **Encuesta Suplementaria de Ingresos (ESI)** en su versión 2020. Esta se encuentra en la carpeta "input/data", en formato .rds, habiendo sido procesada anteriormente. Por ello, empleamos la función `readRDS()` de la librería `base` de R.

```{r readRDS, echo=TRUE}
datos <- readRDS(url("https://github.com/learn-R/10.2-class/raw/main/input/data/data_proc.rds"))
```

Podemos darnos cuenta de que el set de datos presenta 26.821 observaciones (o filas), y 7 variables (o columnas), que incluyen a las variables `ing_t_t`,, `edad`, `sexo`, `est_conyugal`, `ciuo08`, `fact_cal_esi` y `ing_medio`. Esta última discrimina si el sujeto presenta ingresos mayores o iguales (1) a la media de `ing_t_t` o no (0). Para mayor detalle, revisar el script `proc.R` ubicado en la carpeta `R`, para profundizar en el tratamiento de los datos. 

## 3. Explorar datos

A continuación, usaremos la función `view_df()` del paquete `sjPlot`, que presenta un resumen de las variables contenidas en el set de datos, que nos permitirá identificar la _etiqueta_ de cada variable y de cada una de sus alternativas de respuesta. 

```{r view-df, echo=TRUE, message=FALSE}
sjPlot::view_df(datos,
                encoding = 'latin9')
```

Podemos ver que tenemos tres variables cuantitativas (`ing_t_t`, `edad` y `fact_cal_esi`), y cuatro variables categóricas (`sexo`, `est_conyugal`, `ciuo08` e `ing_medio`). Estas últimas tienen 2, 2, 10 y 2 categorías, respectivamente. 

## 4. Creación del modelo de regresión logística binaria

### La regresión logística binaria

Recordemos que, en el caso de la regresión logística, el resultado predicho es el **logit** (logatirmos de los odds), siendo los **odds** una razón de probabilidades (chances). Para llegar hasta la regresión logística, debemos pasar por los odds y los odds-ratio (proporción de chances). 

Las **odds** son _la probabilidad de que algo ocurra_ (por ejemplo, tener un ingreso mayor o igual a la media) dividido por la probabilidad de que _no ocurra_:

\begin{equation}
\ Odds = p/1-p
\end{equation}

Odds de 1 significan chances iguales, mientras que odds inferiores a 1 son negativas, y mayores a 1, positivas. 

Las **Odds ratio (OR)**, por su parte, reflejan la asociación entre las chances de dos variables dicotómicas:

\begin{equation}
\ OR = p_1/(1-p_1)/p_0/(1-p_0)
\end{equation}

Las OR permiten, entonces, presentar en _un único número_ la relación entre dos variables categóricas. Por ello, es una versión del β para **variables dependientes categóricas**. Una de las transformaciones que permite estimar una regresión con variables dependientes dicotómicas es el **logit**, **logaritmo de los odds**

\begin{equation}
\ Logit = ln(Odd) = ln(p/1-p)
\end{equation}

Luego, la fórmula para un modelo de regresión logística binaria simple es

\begin{equation}
\ E(Y) = P = exp(b_{0} + b_{1}X) / 1 + exp(b_{0} + b_{1}X)
\end{equation}

Donde

- $E(Y)$ es el valor estimado/predicho de $Y$
- $P$ es la **probabilidad predicha** 
- $b_{0}$ es el intercepto 
- $b_{1}$ es el **coeficiente de regresión** que, en este caso, presenta valores en _log-odds_

Y para la regresión logística binaria múltiple

\begin{equation}
\ E(Y) = P = exp(b_{0} + b_{1}X_{1} + b_{n}X_{n}) / 1 + exp(b_{0} + b_{1}X_{1} + b_{n}X_{n})
\end{equation}

Donde

- $E(Y)$ es el valor estimado/predicho de $Y$
- $P$ es la **probabilidad predicha** 
- $b_{0}$ es el intercepto 
- $b_{1}$ es el **coeficiente de regresión del primer predictor** que, en este caso, presenta valores en _log-odds_
- $b_{n}$ es el **coeficiente de regresión del predictor n** que, en este caso, presenta valores en _log-odds_

{{< div "note" >}}

### a) Modelo nulo

Una vez realizado lo anterior, es momento de generar nuestro modelo de regresión logística. Emplearemos la función `glm()` del paquete base de `R`, especificando el argumento `family` como `"binomial"`. Lo primero es especificar las variables con las cuales construiremos el modelo: antes de la virgulilla (~) escribiremos nuestra variable dependiente (en este caso, `ing_medio`), y luego, las variables independientes separadas con un signo más (+). Para crear el modelo nulo, en lugar de variables predictoras, especificamos un 1. En síntesis, las diferencias entre crear un modelo de regresión lineal (como se revisó en el práctico anterior) son: 

  + Se utiliza la función `glm()` en lugar de `lm()`
  + Se especifica el argumento `family = 'binomial'`   


```{r modelo0, echo=T, message=F, warning=F}
modelo0 <- glm(ing_medio ~ 1,
              data = datos, 
              weights = fact_cal_esi,
              family = binomial(link = "logit"))
```

**Examinemos** el modelo creado:

```{r modelo0_sin_summary, echo=T, message=F}
summary(modelo0)
```

Como podemos ver, se ha creado en nuestro entorno (Environment) un objeto llamado `modelo0_sin`, que consta de una lista con 30 elementos.

{{< /div >}}


### b) Modelo con predictores numéricos

No obstante, el modelo nulo no es interpretable. Incorporemos edad, predictor `numérico`, y revisemos el modelo estimado

```{r modelo1, echo=T, message=F, warning=F}
modelo1 <- glm(ing_medio ~ edad,
              data = datos, 
              family = binomial(link = "logit"))

summary(modelo1)
```

### c) Modelo con predictores categóricos

Asimismo, gran parte de las veces queremos utilizar variables categóricas (como el sexo, la ocupación o el estado conyugal de las personas) como variables predictoras: 

```{r modelo2, echo=T, message=F, warning=F}
modelo2 <- glm(ing_medio ~ sexo,
              data = datos, 
              family = binomial(link = "logit"))

summary(modelo2)
```

### d) Modelo completo

¡Incorporemos todas las variables que seleccionamos!

```{r modelo3, echo=T, message=F, warning=F}
modelo3 <- glm(ing_medio ~ edad + sexo + ciuo08 + est_conyugal,
              data = datos, 
              family = binomial(link = "logit"))

summary(modelo3)
```

### e) Incorporando el diseño muestral 

No obstante, como se revisó en el práctico anterior, es **fundamental** utilizar los ponderadores para estimar de forma más precisa, al incorporar el diseño muestral en el modelamiento. En aras de ello, especificamos `fact_cal_esi` (nuestro ponderador) en el argumento `weights = `

```{r modelo3_dis, echo=T, message=F, warning=F}
modelo3_dis <- glm(ing_medio ~ edad + sexo + ciuo08 + est_conyugal,
              data = datos, 
              weights = fact_cal_esi,
              family = binomial(link = "logit"))

summary(modelo3_dis)
```

Sin embargo, como podemos darnos cuenta, el output que generamos incorporando este argumento resulta problemático, y difiere en demasía del modelo que no contempla los ponderadores en su estimación. ¿Qué podemos hacer? ¡pues recurriremos a una librería ya conocida! Nos referimos a `srvyr`, que nos permitirá crear un **objeto encuesta**

```{r obj_enc, echo=T, message=F}
esi_design <- as_survey_design(datos, 
                               ids = 1, 
                               weights = fact_cal_esi)
```

¿`srvyr` también tiene una función para crear modelos de regresión logística? Lamentablemente **no**. No obstante, y tal como se revisó en el práctico anterior, la librería ``survey` incluye la función `svyglm()`, que permite estimar modelos de diversas características, considerando el **diseño muestral** de los datos. Esto se especifica con el argumento `design =`, donde debemos especificar el objeto encuesta con que nos hallamos trabajando (es el símil de `data =` en `glm()`). 

```{r survey_binomial, echo=T, message=F, warning=F}
modelo3_survey <- svyglm(ing_medio ~ edad + sexo + ciuo08 + est_conyugal,
                         family = binomial(link = "logit"),
                         design = esi_design)

summary(modelo3_survey)
```

## 5. Extracción de elementos 

La extracción de elementos en modelos de regresión logística no difiere de la extracción de elementos de modelos de regresión lineal (ni de cualquier lista).

**Coeficientes**:

```{r coef, echo=T, message=F}
modelo3$coefficients
```

**Sexto coeficiente** (considerando el intercepto como primero):

```{r coef6, echo=T, message=F}
modelo3$coefficients[6]
```

**Coeficiente de estado conyugal (sin pareja)**:

```{r coef_est_conyugal, echo=T, message=F}
modelo3$coefficients["est_conyugalSin pareja"]
```

También podemos extraer elementos de los modelos creados con `svyglm()`; por ejemplo:

**Devianza**

```{r survey_dev, echo=T, message=F}
summary(modelo3_survey)$deviance
```

**Criterio de Información de Akaike (AIC)**

```{r survey_aic, echo=T, message=F}
summary(modelo3_survey)$aic
```

Podemos utilizar, tal como en el práctico anterior, `sjPlot::get_model_data()` para extraer los valores predichos

```{r survey_pred, echo=T, message=F}
get_model_data(modelo3_survey, 
               type = "pred")
```

### Exponenciación de coeficientes

Como bien sabemos, los _log-odds_ son difícilmente interpretables. Para subsanar ello, podemos **exponenciar** los logaritmos de las chances que figuran en los coeficientes de nuestros modelos de regresión logística, recurriendo a la función `exp()`. Esto permitirá que nuestro coeficientes pasen de estar en log-odds a **Odds-ratio**, cuya interpretación es mucho más sencilla. Probemos con el coeficiente para las personas cuyo estatus conyugal es _Sin pareja_

```{r exp, echo=T, message=F}
exp(modelo3_survey$coefficients["est_conyugalSin pareja"])
```

Luego, podemos crear los OR en nuestro modelo:

```{r exp_create, echo=T, message=F}
modelo3_survey$or <- exp(modelo3_survey$coefficients)
```

¡Comprobemos!

```{r exp_check, echo=T, message=F}
modelo3_survey$or["est_conyugalSin pareja"]
modelo3_survey$coefficients["est_conyugalSin pareja"]
```

## 6. Presentación del modelo creado

### a) Tablas 

En este práctico revisaremos dos maneras de presentar nuestros modelos. La primera sigue la línea de la práctica anterior, empleando `sjPlot::tab_model()`. La segunda es algo mas sofisticada: utilizaremos la librería `texreg` para presentar nuestros modelos, incorporando elementos adicionales a los coeficientes, como lo pueden ser las medidas de ajuste. 

#### Con `sjPlot::tab_model()`

Seguimos la misma idea del práctico anterior: 

```{r tab_model, echo=T, message=F}
sjPlot::tab_model(modelo0, 
                  show.ci=FALSE,
                  df.method = 'wald', #Para realizar más rápidamente el cálculo de los intervalos de confianza
                  encoding = "UTF-8") 
```

Podemos incorporar más de un modelo de regresión a la tabla. Esto es muy útil para comparar los diversos modelos que creamos

```{r tab_model2, echo=T, message=F}
sjPlot::tab_model(list(modelo0, modelo1, modelo2), # los modelos estimados
                  show.ci=FALSE, # no mostrar intervalo de confianza (por defecto lo hace)
                  p.style = "stars", # asteriscos de significación estadística
                  df.method = 'wald',
                  dv.labels = c("Modelo 1", "Modelo 2", "Modelo 3"), # etiquetas de modelos o variables dep.
                  string.pred = "Predictores", string.est = "β", # nombre predictores y símbolo beta en tabla
                  encoding =  "UTF-8")
```

No obstante, hay algo que resulta _un poco **problemático**_: el output de `tab_model()` cuando presentamos modelos de regresión logística, por defecto, presenta los coeficientes en **log-Odds** (logaritmo de las chances). Estos valores son difícilmente interpretables. Sin embargo ¡existe una solución! Si especificamos el argumento `transform = "exp"`, el output de la tabla estará en formato **Odds ratio** (OR), lo cual permite interpretar los coeficientes de manera sencilla. 

```{r tab_model3, echo=T, message=F}
sjPlot::tab_model(modelo3, # modelo con todas las variables
                  show.ci=FALSE, # no mostrar intervalo de confianza (por defecto lo hace)
                  transform = 'exp', # exponenciamos los coeficientes
                  p.style = "stars", # asteriscos de significación estadística
                  df.method = 'wald', #Para realizar más rápidamente el cálculo de los intervalos de confianza
                  dv.labels = "Modelo con todas las variables", # etiquetas de modelos o variables dep.
                  string.pred = "Predictores", string.est = "β", # nombre predictores y símbolo beta en tabla
                  encoding =  "latin9")
```

¡Ahora podemos interpretar los coeficientes de manera sencilla, para cada categoría de respuesta!

¿Y si queremos integrar el **diseño muestral**?

```{r tab_model3_survey, echo=T, message=F}
sjPlot::tab_model(modelo3_survey, # modelo con todas las variables
                  show.ci=FALSE, # no mostrar intervalo de confianza (por defecto lo hace)
                  transform = 'exp', # exponenciamos los coeficientes
                  p.style = "stars", # asteriscos de significación estadística
                  df.method = 'wald',#Para realizar más rápidamente el cálculo de los intervalos de confianza
                  dv.labels = "Modelo con todas las variables", # etiquetas de modelos o variables dep.
                  string.pred = "Predictores", string.est = "β", # nombre predictores y símbolo beta en tabla
                  encoding =  "UTF-8")
```

#### Con `texreg`

La segunda forma de presentar nuestro modelo de en formato tabla es con `texreg`. Hay diversas funciones:

  + `screenreg()`: muestra la tabla en la consola de R.
  + `htmlreg()`: produce una tabla en formato html. Es la que utilizaremos en este práctico. 
  + `texreg()`: produce una tabla en formato LaTex para documentos en PDF.
  
Si no especificamos ningún argumento, `htmlreg()` presenta de forma directa una tabla publicable, con sus respectivas medidas de ajuste. Algo fundamental es especificar `results='asis'` en las opciones del chunk pues, de lo contrario, la tabla no aparecerá en el documento renderizado. 

```{r htmlreg, results='asis'}
htmlreg(modelo3, doctype = F)
```

¡Podemos incluir más de un modelo!

```{r htmlreg_list, results='asis'}
htmlreg(l = list(modelo3, modelo3_survey))
```

A diferencia de `tab_model()`, `htmlreg()` arroja, por defecto, los coeficientes en log-odds. Podemos realizar la transformación a OR de la siguiente manera, recurriendo a la función `extract()` de `texreg`

```{r htmlreg_exp, results='asis'}
or <- texreg::extract(modelo3_survey) #Extraemos info del modelo 
or@coef <- exp(or@coef) #Exponenciamos los coeficientes
```

Y ahora construimos la tabla

```{r htmlreg_exp_compare, results='asis'}
htmlreg(l = list(modelo3_survey, or))
```

¡Personalicemos la tabla! Hay diversos argumentos (especificados a continuación) que permiten incorporar diversos elementos a la tabla, como pueden ser los intervalos de confianza para cada uno de los coeficientes, titular cada uno de los modelos presentados, agregar notas al pie de la tabla, entre otros. Si les interesa profundizar en la personalización de estas tablas, pueden dirigirse a la [documentación de la función](https://www.rdocumentation.org/packages/texreg/versions/1.37.5/topics/htmlreg).

```{r htmlreg_exp_custom, results='asis'}
htmlreg(l = list(modelo3_survey, or), 
          doctype = F, #No incluimos doctype
          caption = "Leyenda", #Leyenda de la tabla 
          caption.above = T, # Presentar la leyenda en la sección superior. Si = FALSE (predeterminado), la leyenda se sitúa bajo la tabla
          custom.model.names = c("Modelo 3", "Modelo 3 (OR)"), #Personalizar los títulos de la tabla 
          ci.force = c(TRUE,TRUE), #Presentar intervalos de confianza
          override.coef = list(coef(modelo3_survey), or@coef), #Sobreescribir los coeficientes a partir de los coeficientes de los modelos
          custom.note = "$^{***}$ p < 0.001; $^{**}$ p < 0.01; $^{*}$ p < 0.05 <br> Errores estándar entre paréntesis. <br> **Nota**: La significancia estadística de los coeficientes en unidades de Odds ratio está calculada en base a los valores $t$, <br> los cuales a su vez se calculan en base a $log(Odds)/SE$") #Incorporamos una nota al pie de la tabla
```

### b) Gráficos

(Una vez más) tal como en el práctico anterior, utilizaremos la librería `sjPlot` para graficar nuestros modelos. En particular, su función `plot_model()` nos permitirá presentar los modelos de manera gráfica. Esta vez, no obstante, el output por defecto es en _Odds ratio_. `

```{r plot_model, echo=T, message=F}
sjPlot::plot_model(modelo3, 
                   show.p = T,
                   show.values =  T,
                   ci.lvl = 0.95, 
                   title = "Estimación de predictores",
                   vline.color = "green")
```


## 7. Resumen 

En este práctico aprendimos a

- Crear **modelos de regresión logística binomial**
- Calcular tales modelos incorporando el diseño muestral
- Representar gráficamente los modelos con tablas y gráficos
- Personalizar tales tablas y gráficos

# 8. Recursos

- [texreg](https://www.rdocumentation.org/packages/texreg/versions/1.37.5/topics/htmlreg) 
- [survey](https://cran.r-project.org/web/packages/survey/survey.pdf)
